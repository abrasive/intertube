#!/usr/bin/env python2

import sys
import pipe
import tun
import select
import pipe
import os
import socket
import argparse
import binascii
import subprocess

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--lport', type=int, default=24601, help='Local port to listen on')
    parser.add_argument('--rport', type=int, default=24601, help='Remote port to connect to')
    parser.add_argument('--key', type=argparse.FileType('r'), help='Secret key file for encryption')
    parser.add_argument('--debug', action='store_true', help='Dump packet I/O')
    parser.add_argument('--cmd', help='Shell command to execute when link comes up. Environment variable IFACE holds name of interface.')
    parser.add_argument('--compress', action='store_true', help='Enable data compression (requires python-lzo)')

    action = parser.add_mutually_exclusive_group(required=True)

    action.add_argument('remote_host', nargs='?', help="Remote host's public address")
    action.add_argument('--make-key', help='Create a new secret key')

    args = parser.parse_args()

    if args.make_key:
        key = pipe.SecretPipe.make_key()
        old_umask = os.umask(0o077)
        with open(args.make_key, 'wb') as fp:
            fp.write(key)
        os.umask(old_umask)
        print "Wrote key to file '%s'. Keep it safe!" % args.make_key
        return

    if not args.key:
        print "Error: --key must be provided"
        sys.exit(1)

    key = args.key.read()
    tap = tun.mktap()

    sp = pipe.SecretPipe(args.lport, args.remote_host, args.rport, key)

    if args.cmd:
        env = dict(os.environ)
        env['IFACE'] = tap.iface
        subprocess.check_call(args.cmd, shell=True, env=env)

    if args.compress:
        from lzo import compress, decompress

    while True:
        r, _, _ = select.select([sp, tap], [], [], 10)

        if sp in r:
            try:
                pkt = sp.recv()
            except socket.error:    # got ICMP Unreachable
                continue

            if not (pkt and len(pkt)):
                continue

            if args.compress:
                print len(pkt),
                pkt = decompress(pkt)
                print len(pkt)

            tap.write(pkt)

            if args.debug:
                print '>', binascii.hexlify(pkt)

        if tap in r:
            pkt = tap.read()

            if args.compress:
                print len(pkt),
                pkt = compress(pkt)
                print len(pkt)

            sp.send(pkt)

            if args.debug:
                print '>', binascii.hexlify(pkt)

        if len(r) == 0:
            # keep hole punch alive
            sp.send("")

if __name__ == "__main__":
    main()
